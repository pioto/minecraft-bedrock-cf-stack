---
AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: 'Minecraft Bedrock Server'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  ServerVersion:
    Description: The version of the Minecraft Bedrock Server to install
    Type: String
    ConstraintDescription: must be a valid Minecraft server version
    Default: '1.14.60.5'
  VPC:
    Description: 'Pick the VPC to run in, usually the "default" one'
    Type: AWS::EC2::VPC::Id
  Subnet:
    Description: 'Pick the subnet to run in'
    Type: AWS::EC2::Subnet::Id
  InstanceType:
    Description: The EC2 instance type for the server
    Type: String
    ConstraintDescription: must be a valid EC2 instance type
    Default: t3a.micro
  HostedZoneName:
    Description: The Route 53 Hosted Zone to add a record to, by name (e.g. "example.com")
    Type: String
    ConstraintDescription: Must be a valid Route 53 Hosted Zone
  DNSName:
    Description: The short dns name for the record to add to Route 53
    Type: String
    Default: minecraft
Mappings:
  # ubuntu/images/hvm-ssd/ubuntu-bionic-18.04-amd64-server-20200430
  # example CLI command to get these IDs, for each region:
  #   aws ec2 describe-images --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-bionic-18.04-amd64-server-20200430" --query "Images[0].ImageId" --output text --region us-west-1
  RegionMap:
    us-east-1:
      AMI: ami-05801d0a3c8e4c443
    us-east-2:
      AMI: ami-0a040c35ca945058a
    us-west-1:
      AMI: ami-0365b50e7a63e3bf1
    us-west-2:
      AMI: ami-06ffade19910cbfc0
Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Minecraft Bedrock Server Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        Description: Minecraft Bedrock Server
        FromPort: 19132
        IpProtocol: udp
        ToPort: 19132
      - CidrIp: 0.0.0.0/0
        Description: SSH
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref VM
  VM:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
        Count: 1
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            apt:
              tmux: []
              unzip: []
          users:
            minecraft:
              groups: []
              uid: '900'
              homeDir: /opt/minecraft/bedrock-server
          sources:
            /opt/minecraft/bedrock-server: !Sub 'https://minecraft.azureedge.net/bin-linux/bedrock-server-${ServerVersion}.zip'
          commands:
            01_chown_server_files:
              command: ['chown', '-R', 'minecraft:minecraft', '/opt/minecraft/bedrock-server']
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 16
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds: [!Ref SecurityGroup]
      SubnetId: !Ref Subnet
      # TODO need to edit the server.properties file, and whitelist.json
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          apt-get update
          apt-get install -y python-pip
          apt-get install -y python-setuptools
          mkdir -p /opt/aws/bin
          cd /tmp
          wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          python /usr/lib/python2.7/dist-packages/easy_install.py --script-dir /opt/aws/bin aws-cfn-bootstrap-latest.tar.gz
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource VM --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource VM --region ${AWS::Region}
      Tags:
        - Key: Schedule
          Value: MinecraftHours
  MinecraftHours:
    Type: Custom::ServiceInstanceSchedule
    Properties:
      Name: MinecraftHours
      NoStackPrefix: 'True'
      Description: 'Minecraft play hours'
      ServiceToken: !Sub >-
        arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:instance-scheduler-InstanceSchedulerMain
      Enforced: 'True'
      Timezone: US/Eastern
      Periods:
        - Description: Gaming hours
          BeginTime: '08:00'
          EndTime: '20:00'
          WeekDays: '0-6'
  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref HostedZoneName
      Name: !Join ['.', [!Ref DNSName, !Ref HostedZoneName]]
      Type: A
      TTL: 60
      ResourceRecords:
        - !GetAtt VM.PublicIp
Outputs:
  PublicName:
    Value: !GetAtt VM.PublicDnsName
    Description: Public Name (connect via SSH as user ec2-user)
